# -----------------------------------------------------------------------------------------------------------------------------
# This file contains application specific settings
#
# This and all other YAML files in the ./config directory will be reloaded by the Delivery Aggregator as soon as you save your
# changes. This means that once you add a service here, it will be available to the next incoming request (The Aggregator will
# not dispatch to the new service(s) though until after you add it them to the rules.yaml)
#
# Because the system will auto reload this file make sure that there are no <tab> characters before you save. Tab characters
# break the YAML parser and will cause the Aggregator to shutdown!
# -----------------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------
# General settings
# ---------------------------------------------------------------------------------
organization_name: 'Your Organization'
application_name: 'Cedilla'
application_description: 'Delivery aggregation service for library resources'

port: 3005

# ---------------------------------------------------------------------------------
# Log settings
#
# Comment out the log_name if you just want the system to write to stdout/stderr
# ---------------------------------------------------------------------------------
log_level: 'debug'
log_path: './log/'
#log_name: 'cedilla.log'

# ---------------------------------------------------------------------------------
# Notifier settings
#
# Notifiers must exist in ./notifiers/ and have corresponding config files in ./config/notifiers/
# Do not include the file extension when listing notifiers
# ---------------------------------------------------------------------------------
notifiers:
#  - email
#  - slack_irc

# ---------------------------------------------------------------------------------
# Socket settings
# ---------------------------------------------------------------------------------
client_api_version: 1.0

# ---------------------------------------------------------------------------------
# Timer settings (milliseconds)
# ---------------------------------------------------------------------------------
tier_timeout: 20000 

# ---------------------------------------------------------------------------------
# Service settings (response length is in bytes)
# ---------------------------------------------------------------------------------
service_max_response_length: 30000 # bytes
service_api_version: 1.0

# ---------------------------------------------------------------------------------
# Cedilla specific parameters coming in on client requests
# ---------------------------------------------------------------------------------
openurl_client_affiliation: 'cedilla:affiliation'

# ---------------------------------------------------------------------------------
# Consortial Service to assist in determining client's affiliation (e.g. which campus they're on)
# Just comment this out if you do not need to determine the client's affiliation
#
# If your institution consists of a consortium of campuses, libraries, or schools and
# you have a webservice available that can translate codes <--> ips then you can use the
# consortial_service block below to have the system attempt to translate a code passed 
# in during the client request into an IP address or vice versa. The code
# and ip are then passed along to the services at the top level of the JSON data as:
#
#     "requestor_affiliation":"CAMPUS-A",
#     "requestor_ip":"127.0.0.1"
#
# If you use a code, it should be passed in as 'affiliation' in the request. For example
# if the request is an openURL, it should have '&cedilla:affiliation=CAMPUS-A' in the URL.
# if its an xml post then you would have <cedilla:affiliation>CAMPUS-A</cedilla:affiliation>
# Otherwise the system will just use the ip in the client request.
#
# The system will swap out the '?' in the URLs with the specific code or ip address
# ---------------------------------------------------------------------------------
#consortial_service:
#  timeout: 10000
#  translate_from_code: 'http://localhost:3106/campus/?'
#  translate_from_ip: 'http://localhost:3106/ip/?'

# ---------------------------------------------------------------------------------
# Turn this on to enable to built in default service so that you get data back when
# you want to verify that everything was properly installed and the system is working.
#
# This will kick off an http server on port 9000
#
# The server returns one item (including one of each child item). The 'default' service
# must also be defined in services.yaml and be listed in the dispatch_always section
# of the rules.yaml file
# ---------------------------------------------------------------------------------
default_content_service: true
default_content_service_port: 9900